/******************************************************************************
	system_mb/mb/system/MBBookMarkRestore.tjs
*******************************************************************************/


class MBBookMarkRestore extends MBComponentLayer
{
	// プロパティ
	var intSaveSlots   =  10;	// セーブスロットの数
	var intCurrentSlot =   0;
	var intSlotBarPosY = 107;
	var intSavePanels  =   6;		// セーブパネルの数（ページあたり）
	
	var strBGImage = 'bookmark/background_load';
	
	var blForceActivate = false;	// とにかくパネルを選べるようにするかどうか
	
	
	// 管理オブジェクト
	var objSaveSlotButtons = [];	// セーブスロットボタンの配列
	var objBookMarkButtons = [];	// セーブデータボタンの配列
	var objSlotMarkerLayer;			// 現在のセーブスロットを表示するレイヤ
	var objCancelButton;			// キャンセルボタン
	var objDialog;					// 確認ダイアログなど
	
	
	// その他メンバ変数
	var refFocusMember;	// フォーカススタックの参照
	var intTempTarget;	// 選択されたセーブデータの番号
	
	
	function MBBookMarkRestore(win, par)
	{
		// コンストラクタ
		
		super.MBComponentLayer(win, par);
		name = 'データローダー';
		init();
	}
	
	function finalize()
	{
		// ファイナライザ
		
		disactivate();
		super.finalize(...);
	}
	
	function init()
	{
		// イニシャライザ
		
		parent   = window.fore.base;
		absolute = MBLayerAbs.backpack;
		
		loadImages(%[ storage : sysfunc.getPathImage(strBGImage) ]);
		setSizeToImageSize();
		setPos(0, 0);
		
		intCurrentSlot = getSlotIDFromDataID(sf.backpack_lastused);
		
		setSaveSlotButtons();
		setBookMarkButtons();
		
		if (objCancelButton === void || !isvalid(objCancelButton)) {
			objCancelButton = new MBButton(window, this);
			objCancelButton.loadImages(sysfunc.getPathImage('bt_return' + MBGraphicPref.BookmarkReturnButtonSuffix));
			objCancelButton.setPos(MBGraphicPref.BookmarkReturnButtonPositionX, MBGraphicPref.BookmarkReturnButtonPositionY);
			objCancelButton.visible = true;
		}
		
		setFocusStack();
		
		visible = true;
	}
	
	function disactivate()
	{
		// 不可視化
		
		visible = false;
		
		invalidate objDialog       if (objDialog       !== void);
		invalidate objCancelButton if (objCancelButton !== void);
		
		SystemManager.fcRemoveStackMember(refFocusMember);
		initSaveSlotButtons();
		initBookMarkButtons();
		
		freeImage();
		SystemManager.intPlayDataStoragerState = 0;
		SystemManager.fireContextMenuEndTrigger();
	}
	
	//--------------------------------------------------------------------------
	
	function setFocusStack()
	{
		// フォーカススタックを設定
		
		setSaveSlotFocusStack();
		setBookMarkFocusStack();
		
		objCancelButton.objCursorMapHash.up   = objBookMarkButtons[intSavePanels - 1];
		objCancelButton.objCursorMapHash.down = objSaveSlotButtons[intCurrentSlot];
		
		SystemManager.fcRemoveStackMember(refFocusMember);
		refFocusMember = SystemManager.fcPushFocusStack(objSaveSlotButtons[intCurrentSlot]);
		SystemManager.fcApplyFocusTargetSearch();
	}
	
	
	//==========================================================================
	// セーブスロット関連
	
	function initSaveSlotButtons()
	{
		// セーブスロットボタンを初期化、というか不可視化
		
		invalidate objSlotMarkerLayer if (objSlotMarkerLayer !== void);
		
		var i;
		for (i=0; i<objSaveSlotButtons.count; i++) {
			invalidate objSaveSlotButtons[i] if (objSaveSlotButtons[i] !== void);
		}
		objSaveSlotButtons = [];
	}
	
	//--------------------------------------------------------------------------
	
	function setSaveSlotButtons()
	{
		// セーブスロットボタンを配置
		
		initSaveSlotButtons();
		
		var i;
		for (i=0; i<intSaveSlots; i++) {
			objSaveSlotButtons[i] = new MBSaveSlotButton(window, this);
			var obj = objSaveSlotButtons[i];
			
			obj.setSize(27, 26);
			if (i == 9) {
				obj.setSize(32, 26);
			}
			obj.setPos(140 + 50 * i, intSlotBarPosY);
			
			if (i == intCurrentSlot) {
				obj.loadImages(sysfunc.getPathImage("bookmark/sect%02d_active".sprintf(i + 1)));
			}
			else {
				obj.loadImages(sysfunc.getPathImage("bookmark/sect%02d".sprintf(i + 1)));
			}
			obj.visible = true;
		}
	}
	
	//--------------------------------------------------------------------------
	
	function setSaveSlotMarker()
	{
		// スロットマーカーを配置する
		// ・・・というより、スロットボタンを描画しなおす
		
		var i;
		
		for (i=0; i<intSaveSlots; i++) {
			var obj = objSaveSlotButtons[i];
			
			if (i == intCurrentSlot) {
				obj.loadImages(sysfunc.getPathImage("bookmark/sect%02d_active".sprintf(i + 1)));
			}
			else {
				obj.loadImages(sysfunc.getPathImage("bookmark/sect%02d".sprintf(i + 1)));
			}
		}
	}
	
	//--------------------------------------------------------------------------
	
	function setSaveSlotFocusStack()
	{
		// セーブスロットボタンのフォーカス設定
		
		var i;
		
		for (i=0; i<objSaveSlotButtons.count; i++) {
			var obj = objSaveSlotButtons[i];
			var left = i - 1;
			if (left < 0) {
				left = intSaveSlots - 1;
			}
			var right = i + 1;
			if (right >= intSaveSlots) {
				right = 0;
			}
			var top    = objCancelButton;
			var bottom = objBookMarkButtons[0];
			
			obj.objCursorMapHash.left  = objSaveSlotButtons[left];
			obj.objCursorMapHash.right = objSaveSlotButtons[right];
			obj.objCursorMapHash.up    = top;
			obj.objCursorMapHash.down  = bottom;
		}
	}
	
	
	//==========================================================================
	// セーブデータ関連
	
	function initBookMarkButtons()
	{
		// セーブデータの選択ボタンを初期化というか不可視化
		
		var i;
		for (i=0; i<objBookMarkButtons.count; i++) {
			invalidate objBookMarkButtons[i] if (objBookMarkButtons[i] !== void);
		}
		objBookMarkButtons = [];
	}
	
	//--------------------------------------------------------------------------
	
	function setBookMarkButtons()
	{
		// セーブデータボタンを配置
		
		initBookMarkButtons();
		
		var i;
		for (i=0; i<intSavePanels; i++) {
			objBookMarkButtons[i] = new MBBookMarkSelectPanel(window, this);
			var obj = objBookMarkButtons[i];
			
			if (i == 0) {
				obj.isAhead = true;
			}
			obj.init(intCurrentSlot * intSavePanels + i);
			obj.setPos(65 + 337 * (i % 2), 145 + 132 * (i \ 2));	// 330, mg10
			obj.drawItemFace();
			obj.visible  = true;
			
			if (blForceActivate || obj.blHaveContent) {
				obj.blActive = true;
			}
		}
	}
	
	//--------------------------------------------------------------------------
	
	function updateBookMarkButtons()
	{
		// セーブデータパネルを再描画
		
		var i;
		for (i=0; i<intSavePanels; i++) {
			var obj = objBookMarkButtons[i];
			obj.init(intCurrentSlot * intSavePanels + i);
			obj.drawItemFace();
			obj.visible = true;
			
			if (blForceActivate || obj.blHaveContent) {
				obj.blActive = true;
			}
			else {
				obj.blActive = false;
			}
		}
		
		// トップパネルとキャンセルボタンのフォーカススタックを再設定
		var ref = objSaveSlotButtons[intCurrentSlot];
		objBookMarkButtons[0].objCursorMapHash.up = ref;
		objCancelButton.objCursorMapHash.down     = ref;
	}
	
	//--------------------------------------------------------------------------
	
	function setBookMarkFocusStack()
	{
		// ブックマークボタンのフォーカス設定
		
		var i;
		
		for (i=0; i<intSavePanels; i++) {
			var obj = objBookMarkButtons[i];
			var up  = i - 2;
			if (up < 0) {
				up = objSaveSlotButtons[intCurrentSlot];
			}
			else {
				up = objBookMarkButtons[up];
			}
			
			var down = i + 2;
			if (down >= intSavePanels) {
				down = objCancelButton;
			}
			else {
				down = objBookMarkButtons[down];
			}
			
			var left;
			var right;
			if (i % 2) {
				left  = objBookMarkButtons[i - 1];
				right = objBookMarkButtons[i - 1];
			}
			else {
				left  = objBookMarkButtons[i + 1];
				right = objBookMarkButtons[i + 1];
			}
			
			obj.objCursorMapHash.up    = up;
			obj.objCursorMapHash.down  = down;
			obj.objCursorMapHash.left  = left;
			obj.objCursorMapHash.right = right;
		}
	}
	
	//==========================================================================
	// イベント処理関連
	
	function onSelectedItemClick(sender)
	{
		// ボタンクリック時の動作
		
		// キャンセル
		if (sender == objCancelButton) {
			sndfunc.seDecide();
			disactivate();
			window.trigger('CLOSE_BOOKMARK_WINDOW');
			return;
		}
		
		var res;
		
		// スロット変更
		res = objSaveSlotButtons.find(sender);
		if (res > -1) {
			sndfunc.seDeside();
			intCurrentSlot = res;
			setSaveSlotMarker();
			updateBookMarkButtons();
			return;
		}
		
		
		// ブックマークパネル
		res = objBookMarkButtons.find(sender);
		if (res > -1) {
			makeConfirmation(sender);
			return;
		}
	}
	
	//--------------------------------------------------------------------------
	
	function onEscapeKeyDown()
	{
		// エスケープキーが押されたときの動作
		
		onSelectedItemClick(objCancelButton);
	}
	
	//--------------------------------------------------------------------------
	
	function onMouseDown(x, y, button, shift)
	{
		if (button == mbRight) {
			onEscapeKeyDown();
			return;
		}
		
		super.onMouseDown(...);
	}
	
	
	//==========================================================================
	// 動作関連
	
	function makeConfirmation(sender)
	{
		// 動作の確認
		
		intTempTarget = sender.intDataNumber;
		
		invalidate objDialog if (objDialog !== void);
		
		var str   = "No.%dをロードします。\nよろしいですか？".sprintf(intTempTarget + 1);
		objDialog = new MBPseudyYesNoDialog(window, window.fore.base, this, str);
		objDialog.show();
	}
	
	//--------------------------------------------------------------------------
	
	function onYesNoSelected(res)
	{
		// 選択結果
		
		if (res) {
			doMyWork();
		}
		else {
			intTempTarget = void;
		}
	}
	
	//--------------------------------------------------------------------------
	
	function doMyWork()
	{
		// 動作を行う
		
		sf.backpack_lastused  = intTempTarget;
		tf.lastloaded_savenum = intTempTarget;
		
		GraphicManager.showLoadingCartain();
		SystemManager.strContextMenuType = 'story';
		disactivate();
		
		window.loadBookMark(intTempTarget, true, true);
	}
	
	//==========================================================================
	// その他ユーティリティ
	
	function getSlotIDFromDataID(num)
	{
		// データIDからスロット番号を取得
		
		if (!num) {
			num = 0;
		}
		
		var res = num \ intSavePanels;
		
		if (!res) {
			res = 0;
		}
		else if (res >= intSaveSlots) {
			res = intSaveSlots - 1;
		}
		
		return res;
	}
	
	//--------------------------------------------------------------------------
	
	function removeSaveDate(num)
	{
		// 指定番号のセーブデータを消去する
		
		if (num < 0 || num >= intSavePanels * intSaveSlots) {
			return;
		}
		
		var fname = "%s/data%d.bmp".sprintf(window.saveDataLocation, num);
		
		if (!Storages.isExistentStorage(fname)) {
			return;
		}
		
		window.bookMarkNames[num] = "";
		window.bookMarkDates[num] = "";
		
		updateBookMarkButtons();
		
		invalidate objDialog if (objDialog !== void);
		
		var str = "No.%dを削除しました。".sprintf(num + 1);
		objDialog = new MBPseudyNoticeDialog(window, window.fore.base, str);
		objDialog.show();
		
		// KTLに多謝
		LocalFiles.remove(fname);
	}
}
