/******************************************************************************
	system_mb/mb/system/cmenu/MBNormalContextMenu.tjs
*******************************************************************************/


class MBNormalContextMenu extends MBDefaultContextMenu
{
	var objMenuLabelArray = ['自動読み進め (A)', 'シーンスキップ (P)', 'メッセージスキップ (F)', 'メッセージ履歴 (R)', '--', 'メッセージ枠を隠す (H)','--', 'セーブ', 'ロード', '--', '環境設定'];
	
	var intSceneSkipIndex   = 1;
	var intMessageSkipIndex = 2;
	var intMessageHideIndex = 5;
	
	function MBNormalContextMenu(win, par, own)
	{
		// コンストラクタ
		
		super.MBDefaultContextMenu(...);
	}
	
	function finalize()
	{
		// ファイナライザ
		
		super.finalize(...);
	}
	
	
	//==========================================================================
	
	function makeMainMenu()
	{
		// メニューを作る
		
		var tx = borderWidth + marginWidth;
		var ty = 30;
		
		var i;
		var count = 0;
		for (i=0; i<objMenuLabelArray.count; i++) {
				if (objMenuLabelArray[i] == '--') {
				drawHorizontalBorder(tx, ty);
				ty += fontSize * 0.5 + 1;
			}
			else {
				objMenuItemArray[count] = new MBContextMenuItem(window, this, objMenuLabelArray[i]);
				objMenuItemArray[count].setPos(tx, ty);
				
				if (i == intSceneSkipIndex) {
					objMenuItemArray[count].drawItemFaceDisabled();
					
					// シーンスキップが可能な場合のみシーンスキップを有効にする
					if (SceneManager.blSceneSkipEnabled && SceneManager.getSceneStatus()) {
						objMenuItemArray[count].drawItemFace();
					}
				}
				
				else if (i == intMessageSkipIndex) {
					objMenuItemArray[count].drawItemFaceDisabled();
					
					// メッセージスキップが可能な場合のみ有効にする
					if (SceneManager.blMessageSkipEnabled && SceneManager.getMessageSkipStatus()) {
						objMenuItemArray[count].drawItemFace();
					}
				}
				
				else if (i == intMessageHideIndex) {
					objMenuItemArray[count].drawItemFaceDisabled();
					
					// メッセージ枠を隠すのが有効な場合のみ有効にする
					if (SystemManager.blMsgHideEnabled) {
						objMenuItemArray[count].drawItemFace();
					}
				}
				
				// 御披露目版なのでセーブ・ロードを無効化
				/*if (i == 9 || i == 10) {
					objMenuItemArray[count].drawItemFaceDisabled();
				}*/
				
				count += 1;
				ty    += fontSize * 1.5;
			}
		}
		
		
		drawHorizontalBorder(tx, ty);
		
		ty += 1 + fontSize * 0.5;
		objResetButton = new MBContextMenuItem(window, this, "リセット");
		objResetButton.setPos(tx, ty);
		
		ty += fontSize * 1.5;
		objQuitButton = new MBContextMenuItem(window, this, "ゲーム終了");
		objQuitButton.setPos(tx, ty);
		
		ty += fontSize * 1.5;
		drawHorizontalBorder(tx, ty);
		
		ty += 1 + 20;
		objCloseButton = new MBContextMenuButton(window, this);
		objCloseButton.setImageSize(147, 25);
		objCloseButton.setSizeToImageSize();
		objCloseButton.loadImages("bt_cancel");
		objCloseButton.setPos((width - objCloseButton.width) * 0.5, ty);
		objCloseButton.visible = true;
	}
	
	
	//==========================================================================
	
	function doOptionalWork(label)
	{
		// オプション項目の動作
		
		switch (label) {
			case 'シーンスキップ (P)':
				TAG.unlocksnapshot(%[]);
				window.conductor.onReturn(%[]);
				disableAll(false);
				sndfunc.seDeside();
				window.process("", "*scene-end");
				MBSystem.removeTempObject(tf.cutinctrl);
				SystemManager.destroyContextMenu();
				return;
			
			case 'メッセージスキップ (F)':
				TAG.unlocksnapshot(%[]);
				window.conductor.onReturn(%[]);
				disableAll(false);
				sndfunc.seDeside();
				window.onSkipToNextStopMenuItemClick();
				SystemManager.destroyContextMenu();
				return;
			
			case 'メッセージ履歴 (R)':
				TAG.unlocksnapshot(%[]);
				window.conductor.onReturn(%[]);
				disableAll(false);
				sndfunc.seDeside();
				window.showHistory();
				SystemManager.destroyContextMenu();
				return;
			
			case '自動読み進め (A)':
				TAG.unlocksnapshot(%[]);
				window.conductor.onReturn(%[]);
				disableAll(false);
				sndfunc.seDeside();
				window.hideMouseCursor();
				window.onAutoModeMenuItemClick();
				SystemManager.destroyContextMenu();
				return;
			
			case 'セーブ':
				SystemManager.startPlayDataStorager('save');
				SystemManager.destroyContextMenu();
				return;
			
			case 'ロード':
				SystemManager.startPlayDataStorager('load');
				SystemManager.destroyContextMenu();
				return;
			
			case 'メッセージ枠を隠す (H)':
				SystemManager.hideMessageLayerAsTemp();
				SystemManager.destroyContextMenu();
				return;
		}
		
		super.doOptionalWork(...);
	}
}
